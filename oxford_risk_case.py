# -*- coding: utf-8 -*-
"""Oxford_Risk_Case.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M4sx_wpSuf4ZFiQoQtmvf7D6BBYEB6m6
"""

import os

os.environ["SUPABASE_API_KEY"] = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB2Z2FhaWt6dG96d2xmaHlycWxvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDE2MjUsImV4cCI6MjA2MzQxNzYyNX0.iAqMXnJ_sJuBMtA6FPNCRcYnKw95YkJvY3OhCIZ77vI"

# Boxplot of GBP totals
plt.figure(figsize=(8, 4))
sns.boxplot(x=merged_df['total_gbp_value'])
plt.title('Boxplot of Total GBP Assets')
plt.xlabel('Total GBP Assets (£)')
plt.show()

# Boxplot of total investments in USD converted to GBP for comparision
usd_assets = assets_df[assets_df['asset_currency'] == 'USD'].copy()  # <--- THIS is crucial
usd_assets['usd_value_in_gbp'] = usd_assets['asset_value'] * exchange_rates['USD']

usd_to_gbp_sum = usd_assets.groupby('_id')['usd_value_in_gbp'].sum().reset_index(name='total_usd_in_gbp')
merged_df = pd.merge(merged_df, usd_to_gbp_sum, on='_id', how='left')
merged_df['total_usd_in_gbp'] = merged_df['total_usd_in_gbp'].fillna(0)
plt.figure(figsize=(10, 5))

sns.boxplot(x=merged_df['total_usd_in_gbp'], color='lightblue')
plt.title('Boxplot of Total USD Assets (Converted to GBP)')
plt.xlabel('Total USD Investments Converted to GBP (£)')
plt.grid(True, axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import os
import pandas as pd
import requests
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import numpy as np

# --- Configuration ---
PERSONALITY_CSV_URL = "https://raw.githubusercontent.com/karwester/behavioural-finance-task/refs/heads/main/personality.csv"
SUPABASE_URL = "https://pvgaaikztozwlfhyrqlo.supabase.co"

# To enter API key securely in Colab
API_KEY = input("Enter your Supabase API key: ").strip()

# Setting up environment variable
os.environ["SUPABASE_API_KEY"] = API_KEY

# Loading data sets
def load_personality_data():
    return pd.read_csv(PERSONALITY_CSV_URL)

def load_assets_data():
    headers = {
        "apikey": API_KEY,
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
    }
    url = f"{SUPABASE_URL}/rest/v1/assets?select=*"
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    data = response.json()
    if not isinstance(data, list):
        raise ValueError("API did not return a list of records.")
    return pd.DataFrame(data)

try:
    personality_df = load_personality_data()
    print("Loaded personality data successfully.")

    assets_df = load_assets_data()
    print(f"Loaded {len(assets_df)} asset records successfully.")

except requests.exceptions.HTTPError as http_err:
    print(f"HTTP error occurred: {http_err}")
    if http_err.response.status_code == 401:
        print("Unauthorized access - check your API key and Supabase RLS policies.")
except Exception as err:
    print(f"An error occurred: {err}")

# --- Step 2: Combine data ---
merged_df_all_assets = pd.merge(personality_df, assets_df, on='_id', how='left')

# Convert currencies to GBP
exchange_rates = {
    'USD': 0.73,
    'GBP': 1.00,
    'EUR': 0.85,
    'JPY': 0.0051,
    'AUD': 0.477}

assets_df['asset_value_gbp'] = assets_df.apply(lambda row: row['asset_value'] * exchange_rates[row['asset_currency']], axis=1)

# Creating total_gbp_value column
gbp_assets = merged_df_all_assets[merged_df_all_assets['asset_currency'] == 'GBP']
gbp_assets_sum = gbp_assets.groupby('_id')['asset_value'].sum().reset_index(name='total_gbp_value')
merged_df = pd.merge(merged_df_all_assets, gbp_assets_sum, on='_id', how='left')
merged_df['total_gbp_value'] = merged_df['total_gbp_value'].fillna(0)

# Identify highest investor
highest = merged_df.loc[merged_df['total_gbp_value'].idxmax()]
highest_id = highest['_id']
highest_gbp = highest['total_gbp_value']
highest_risk = highest['risk_tolerance']

print("=== Highest GBP Asset Holder ===")
print(f"Person ID: {highest_id}")
print(f"Total GBP Assets: £{highest_gbp:,.2f}")
print(f"Risk Tolerance Score: {highest_risk:.3f}")

# --- Step 3: EDA ---
print("\n--- Asset and Personality Statistics Overview ---")
print(merged_df.drop(columns=['_id', 'asset_allocation_id']).describe())


# Boxplot by currency in GBP
plt.figure(figsize=(10, 5))
sns.boxplot(x='asset_currency', y='asset_value_gbp', data=assets_df)
plt.title('Boxplot of Asset Values by Currency (All in GBP)')
plt.xlabel('Asset Currency')
plt.ylabel('Asset Value (£)')
plt.xticks(rotation=45)
plt.show()

# Boxplot by asset type in GBP
plt.figure(figsize=(10, 5))
sns.boxplot(x='asset_allocation', y='asset_value_gbp', data=assets_df)
plt.title('Boxplot of Asset Values by Type (All in GBP)')
plt.xlabel('Asset Type')
plt.ylabel('Asset Value (£)')
plt.xticks(rotation=45)
plt.show()


# Histogram of personality traits
traits = ['risk_tolerance', 'confidence', 'composure', 'impulsivity', 'impact_desire']
colors = ['blue', 'green', 'red', 'orange', 'purple']
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()
for i, trait in enumerate(traits):
    sns.histplot(personality_df[trait], bins=30, kde=True, color=colors[i], ax=axes[i])
    axes[i].set_title(f'Distribution of {trait.capitalize()}')
    axes[i].set_xlabel(trait.capitalize())
    axes[i].set_ylabel('Frequency')
fig.delaxes(axes[5])
plt.tight_layout()
plt.show()

# Scatter plots: Personality vs Cash/Crypto
cash_crypto_df = assets_df[assets_df['asset_allocation'].isin(['Cash', 'Crypto'])]
cash_crypto_totals = cash_crypto_df.groupby(['_id', 'asset_allocation'])['asset_value_gbp'].sum().reset_index()
merged_cash_crypto_df = pd.merge(personality_df, cash_crypto_totals, on='_id', how='left')
asset_types = ['Cash', 'Crypto']

for trait in traits:
    fig, axes = plt.subplots(1, 2, figsize=(8, 4), sharey=True)
    for i, asset_type in enumerate(asset_types):
        subset = merged_cash_crypto_df[merged_cash_crypto_df['asset_allocation'] == asset_type]
        sns.scatterplot(data=subset, x=trait, y='asset_value_gbp', ax=axes[i])
        axes[i].set_title(f'{trait.capitalize()} vs {asset_type}')
        axes[i].set_xlabel(trait.capitalize())
        axes[i].set_ylabel('Value (£)' if i == 0 else '')
    fig.suptitle(f'{trait.capitalize()}', fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Scatter plots: Personality vs Equities/Bonds
cash_crypto_df = assets_df[assets_df['asset_allocation'].isin(['Equities', 'Bonds'])]
cash_crypto_totals = cash_crypto_df.groupby(['_id', 'asset_allocation'])['asset_value_gbp'].sum().reset_index()
merged_cash_crypto_df = pd.merge(personality_df, cash_crypto_totals, on='_id', how='left')
asset_types = ['Equities', 'Bonds']

for trait in traits:
    fig, axes = plt.subplots(1, 2, figsize=(8, 4), sharey=True)
    for i, asset_type in enumerate(asset_types):
        subset = merged_cash_crypto_df[merged_cash_crypto_df['asset_allocation'] == asset_type]
        sns.scatterplot(data=subset, x=trait, y='asset_value_gbp', ax=axes[i])
        axes[i].set_title(f'{trait.capitalize()} vs {asset_type}')
        axes[i].set_xlabel(trait.capitalize())
        axes[i].set_ylabel('Value (£)' if i == 0 else '')
    fig.suptitle(f'{trait.capitalize()}', fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()



# Step 5: Correlation Matrix
corr_cols = ['confidence', 'risk_tolerance', 'composure', 'impulsivity', 'impact_desire', 'total_gbp_value']
corr_matrix = merged_df[corr_cols].corr()
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix: Personality Traits & GBP Assets')
plt.show()